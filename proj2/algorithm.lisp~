(defun alpha-beta (node player &optional (time-limit 1000) (depth 2))
  "Alpha Beta Algorithm"
  (let ((miliseconds (get-internal-real-time))
        (alpha 9999999999)
        (beta -9999999999))
    (labels ((min-layer(node depth)
               "Max layer in the algorithm"
               (cond ((or (equal depth 0) (>= (time-available time-limit miliseconds) 90)) (evaluate node player))
                     (t (let ((tmp 1))
                          (dolist (child (partenogenese node player)) ;; ordenar listas
                            (setf tmp (min tmp (max-layer child (1- depth))))
                            (setf beta (min beta tmp))
                            (if (>= beta alpha) (return tmp)))
                          tmp))))
             (max-layer(node depth)
               "Min layer in the algorithm"
               (cond ((or (equal depth 0) (>= (time-available time-limit miliseconds) 90)) (evaluate node player))
                     (t (let ((tmp -1))
                          (dolist (child (partenogenese node player)) ;; ordenar listas
                            (setf tmp (max tmp (max-layer child (1- depth))))
                            (setf alpha (max alpha tmp))
                            (if (>= beta alpha) (return tmp)))
                          tmp)))))
      (max-layer node depth))))

(defun alpha-beta (root player1 player2 &optional (time-limit 1000) (depth 5))
  "Alpha Beta"
  (let ((miliseconds (get-internal-real-time))
        (alpha most-negative-fixnum)
        (beta most-positive-fixnum))
    (labels ((max-layer(parent)
               "Max layer in the algorithm."
               (cond ((or (equal depth 0) (>= (time-available time-limit miliseconds) 90)) (evaluate node player))
                     (t (dolist (child (partenogenese node player1))
                            (setf alpha (max alpha (min-layer child)))
                            (if (>= beta alpha) (return  
                          
        (max-layer root)))


